/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var aelf_options_pb = require('./aelf_options_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.token.ApproveInput', null, global);
goog.exportSymbol('proto.token.Approved', null, global);
goog.exportSymbol('proto.token.BurnInput', null, global);
goog.exportSymbol('proto.token.Burned', null, global);
goog.exportSymbol('proto.token.ChargeTransactionFeesInput', null, global);
goog.exportSymbol('proto.token.ClaimTransactionFeesInput', null, global);
goog.exportSymbol('proto.token.CreateInput', null, global);
goog.exportSymbol('proto.token.CreateNativeTokenInput', null, global);
goog.exportSymbol('proto.token.CrossChainReceiveTokenInput', null, global);
goog.exportSymbol('proto.token.CrossChainTransferInput', null, global);
goog.exportSymbol('proto.token.GetAllowanceInput', null, global);
goog.exportSymbol('proto.token.GetAllowanceOutput', null, global);
goog.exportSymbol('proto.token.GetBalanceInput', null, global);
goog.exportSymbol('proto.token.GetBalanceOutput', null, global);
goog.exportSymbol('proto.token.GetMethodFeeInput', null, global);
goog.exportSymbol('proto.token.GetMethodFeeOutput', null, global);
goog.exportSymbol('proto.token.GetTokenInfoInput', null, global);
goog.exportSymbol('proto.token.IssueInput', null, global);
goog.exportSymbol('proto.token.IssueNativeTokenInput', null, global);
goog.exportSymbol('proto.token.LockInput', null, global);
goog.exportSymbol('proto.token.SetMethodFeeInput', null, global);
goog.exportSymbol('proto.token.TokenContractInitializeInput', null, global);
goog.exportSymbol('proto.token.TokenInfo', null, global);
goog.exportSymbol('proto.token.TransferFromInput', null, global);
goog.exportSymbol('proto.token.TransferInput', null, global);
goog.exportSymbol('proto.token.Transferred', null, global);
goog.exportSymbol('proto.token.UnApproveInput', null, global);
goog.exportSymbol('proto.token.UnApproved', null, global);
goog.exportSymbol('proto.token.UnlockInput', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.TokenInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.TokenInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.TokenInfo.displayName = 'proto.token.TokenInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.TokenInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.token.TokenInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.TokenInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TokenInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    supply: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalsupply: jspb.Message.getFieldWithDefault(msg, 4, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 5, 0),
    issuer: (f = msg.getIssuer()) && common_pb.Address.toObject(includeInstance, f),
    isburnable: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.TokenInfo}
 */
proto.token.TokenInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.TokenInfo;
  return proto.token.TokenInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.TokenInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.TokenInfo}
 */
proto.token.TokenInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSupply(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTotalsupply(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDecimals(value);
      break;
    case 6:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsburnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.TokenInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.TokenInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.TokenInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TokenInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSupply();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getTotalsupply();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getIsburnable();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.TokenInfo.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.TokenInfo.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tokenName = 2;
 * @return {string}
 */
proto.token.TokenInfo.prototype.getTokenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.token.TokenInfo.prototype.setTokenname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 supply = 3;
 * @return {number}
 */
proto.token.TokenInfo.prototype.getSupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.TokenInfo.prototype.setSupply = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint64 totalSupply = 4;
 * @return {number}
 */
proto.token.TokenInfo.prototype.getTotalsupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.TokenInfo.prototype.setTotalsupply = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint32 decimals = 5;
 * @return {number}
 */
proto.token.TokenInfo.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.token.TokenInfo.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Address issuer = 6;
 * @return {?proto.Address}
 */
proto.token.TokenInfo.prototype.getIssuer = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 6));
};


/** @param {?proto.Address|undefined} value */
proto.token.TokenInfo.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.token.TokenInfo.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.TokenInfo.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool isBurnable = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.token.TokenInfo.prototype.getIsburnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.token.TokenInfo.prototype.setIsburnable = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.CreateInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.token.CreateInput.repeatedFields_, null);
};
goog.inherits(proto.token.CreateInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.CreateInput.displayName = 'proto.token.CreateInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.token.CreateInput.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.CreateInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.CreateInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.CreateInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CreateInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    totalsupply: jspb.Message.getFieldWithDefault(msg, 3, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    issuer: (f = msg.getIssuer()) && common_pb.Address.toObject(includeInstance, f),
    isburnable: jspb.Message.getFieldWithDefault(msg, 6, false),
    lockwhitelistList: jspb.Message.toObjectList(msg.getLockwhitelistList(),
    common_pb.Address.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.CreateInput}
 */
proto.token.CreateInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.CreateInput;
  return proto.token.CreateInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.CreateInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.CreateInput}
 */
proto.token.CreateInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTotalsupply(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDecimals(value);
      break;
    case 5:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsburnable(value);
      break;
    case 7:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.addLockwhitelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.CreateInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.CreateInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.CreateInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CreateInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotalsupply();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getIsburnable();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getLockwhitelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.CreateInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.CreateInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tokenName = 2;
 * @return {string}
 */
proto.token.CreateInput.prototype.getTokenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.token.CreateInput.prototype.setTokenname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 totalSupply = 3;
 * @return {number}
 */
proto.token.CreateInput.prototype.getTotalsupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.CreateInput.prototype.setTotalsupply = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint32 decimals = 4;
 * @return {number}
 */
proto.token.CreateInput.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.CreateInput.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Address issuer = 5;
 * @return {?proto.Address}
 */
proto.token.CreateInput.prototype.getIssuer = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 5));
};


/** @param {?proto.Address|undefined} value */
proto.token.CreateInput.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.token.CreateInput.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.CreateInput.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool isBurnable = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.token.CreateInput.prototype.getIsburnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.token.CreateInput.prototype.setIsburnable = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated Address lockWhiteList = 7;
 * @return {!Array.<!proto.Address>}
 */
proto.token.CreateInput.prototype.getLockwhitelistList = function() {
  return /** @type{!Array.<!proto.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Address, 7));
};


/** @param {!Array.<!proto.Address>} value */
proto.token.CreateInput.prototype.setLockwhitelistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Address}
 */
proto.token.CreateInput.prototype.addLockwhitelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Address, opt_index);
};


proto.token.CreateInput.prototype.clearLockwhitelistList = function() {
  this.setLockwhitelistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.CreateNativeTokenInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.token.CreateNativeTokenInput.repeatedFields_, null);
};
goog.inherits(proto.token.CreateNativeTokenInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.CreateNativeTokenInput.displayName = 'proto.token.CreateNativeTokenInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.token.CreateNativeTokenInput.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.CreateNativeTokenInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.CreateNativeTokenInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.CreateNativeTokenInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CreateNativeTokenInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    totalsupply: jspb.Message.getFieldWithDefault(msg, 3, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    issuer: (f = msg.getIssuer()) && common_pb.Address.toObject(includeInstance, f),
    isburnable: jspb.Message.getFieldWithDefault(msg, 6, false),
    lockwhitesystemcontractnamelistList: jspb.Message.toObjectList(msg.getLockwhitesystemcontractnamelistList(),
    common_pb.Hash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.CreateNativeTokenInput}
 */
proto.token.CreateNativeTokenInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.CreateNativeTokenInput;
  return proto.token.CreateNativeTokenInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.CreateNativeTokenInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.CreateNativeTokenInput}
 */
proto.token.CreateNativeTokenInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTotalsupply(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDecimals(value);
      break;
    case 5:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsburnable(value);
      break;
    case 7:
      var value = new common_pb.Hash;
      reader.readMessage(value,common_pb.Hash.deserializeBinaryFromReader);
      msg.addLockwhitesystemcontractnamelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.CreateNativeTokenInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.CreateNativeTokenInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.CreateNativeTokenInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CreateNativeTokenInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotalsupply();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getIsburnable();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getLockwhitesystemcontractnamelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      common_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.CreateNativeTokenInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.CreateNativeTokenInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tokenName = 2;
 * @return {string}
 */
proto.token.CreateNativeTokenInput.prototype.getTokenname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.token.CreateNativeTokenInput.prototype.setTokenname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 totalSupply = 3;
 * @return {number}
 */
proto.token.CreateNativeTokenInput.prototype.getTotalsupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.CreateNativeTokenInput.prototype.setTotalsupply = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint32 decimals = 4;
 * @return {number}
 */
proto.token.CreateNativeTokenInput.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.CreateNativeTokenInput.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Address issuer = 5;
 * @return {?proto.Address}
 */
proto.token.CreateNativeTokenInput.prototype.getIssuer = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 5));
};


/** @param {?proto.Address|undefined} value */
proto.token.CreateNativeTokenInput.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.token.CreateNativeTokenInput.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.CreateNativeTokenInput.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool isBurnable = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.token.CreateNativeTokenInput.prototype.getIsburnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.token.CreateNativeTokenInput.prototype.setIsburnable = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated Hash lockWhiteSystemContractNameList = 7;
 * @return {!Array.<!proto.Hash>}
 */
proto.token.CreateNativeTokenInput.prototype.getLockwhitesystemcontractnamelistList = function() {
  return /** @type{!Array.<!proto.Hash>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Hash, 7));
};


/** @param {!Array.<!proto.Hash>} value */
proto.token.CreateNativeTokenInput.prototype.setLockwhitesystemcontractnamelistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Hash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Hash}
 */
proto.token.CreateNativeTokenInput.prototype.addLockwhitesystemcontractnamelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Hash, opt_index);
};


proto.token.CreateNativeTokenInput.prototype.clearLockwhitesystemcontractnamelistList = function() {
  this.setLockwhitesystemcontractnamelistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.IssueInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.IssueInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.IssueInput.displayName = 'proto.token.IssueInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.IssueInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.IssueInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.IssueInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.IssueInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 3, ""),
    to: (f = msg.getTo()) && common_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.IssueInput}
 */
proto.token.IssueInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.IssueInput;
  return proto.token.IssueInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.IssueInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.IssueInput}
 */
proto.token.IssueInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 4:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.IssueInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.IssueInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.IssueInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.IssueInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.IssueInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.IssueInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 amount = 2;
 * @return {number}
 */
proto.token.IssueInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.IssueInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string memo = 3;
 * @return {string}
 */
proto.token.IssueInput.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.token.IssueInput.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Address to = 4;
 * @return {?proto.Address}
 */
proto.token.IssueInput.prototype.getTo = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 4));
};


/** @param {?proto.Address|undefined} value */
proto.token.IssueInput.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.token.IssueInput.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.IssueInput.prototype.hasTo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.IssueNativeTokenInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.IssueNativeTokenInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.IssueNativeTokenInput.displayName = 'proto.token.IssueNativeTokenInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.IssueNativeTokenInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.IssueNativeTokenInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.IssueNativeTokenInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.IssueNativeTokenInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tosystemcontractname: (f = msg.getTosystemcontractname()) && common_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.IssueNativeTokenInput}
 */
proto.token.IssueNativeTokenInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.IssueNativeTokenInput;
  return proto.token.IssueNativeTokenInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.IssueNativeTokenInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.IssueNativeTokenInput}
 */
proto.token.IssueNativeTokenInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 4:
      var value = new common_pb.Hash;
      reader.readMessage(value,common_pb.Hash.deserializeBinaryFromReader);
      msg.setTosystemcontractname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.IssueNativeTokenInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.IssueNativeTokenInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.IssueNativeTokenInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.IssueNativeTokenInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTosystemcontractname();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.IssueNativeTokenInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.IssueNativeTokenInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 amount = 2;
 * @return {number}
 */
proto.token.IssueNativeTokenInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.IssueNativeTokenInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string memo = 3;
 * @return {string}
 */
proto.token.IssueNativeTokenInput.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.token.IssueNativeTokenInput.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Hash toSystemContractName = 4;
 * @return {?proto.Hash}
 */
proto.token.IssueNativeTokenInput.prototype.getTosystemcontractname = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, common_pb.Hash, 4));
};


/** @param {?proto.Hash|undefined} value */
proto.token.IssueNativeTokenInput.prototype.setTosystemcontractname = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.token.IssueNativeTokenInput.prototype.clearTosystemcontractname = function() {
  this.setTosystemcontractname(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.IssueNativeTokenInput.prototype.hasTosystemcontractname = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.TransferInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.TransferInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.TransferInput.displayName = 'proto.token.TransferInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.TransferInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.TransferInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.TransferInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TransferInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.TransferInput}
 */
proto.token.TransferInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.TransferInput;
  return proto.token.TransferInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.TransferInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.TransferInput}
 */
proto.token.TransferInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.TransferInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.TransferInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.TransferInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TransferInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Address to = 1;
 * @return {?proto.Address}
 */
proto.token.TransferInput.prototype.getTo = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.TransferInput.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.TransferInput.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.TransferInput.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.token.TransferInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.token.TransferInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 amount = 3;
 * @return {number}
 */
proto.token.TransferInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.TransferInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.token.TransferInput.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.token.TransferInput.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.LockInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.LockInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.LockInput.displayName = 'proto.token.LockInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.LockInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.LockInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.LockInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.LockInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && common_pb.Address.toObject(includeInstance, f),
    to: (f = msg.getTo()) && common_pb.Address.toObject(includeInstance, f),
    lockid: (f = msg.getLockid()) && common_pb.Hash.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    usage: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.LockInput}
 */
proto.token.LockInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.LockInput;
  return proto.token.LockInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.LockInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.LockInput}
 */
proto.token.LockInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = new common_pb.Hash;
      reader.readMessage(value,common_pb.Hash.deserializeBinaryFromReader);
      msg.setLockid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.LockInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.LockInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.LockInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.LockInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getLockid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional Address from = 1;
 * @return {?proto.Address}
 */
proto.token.LockInput.prototype.getFrom = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.LockInput.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.LockInput.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.LockInput.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address to = 2;
 * @return {?proto.Address}
 */
proto.token.LockInput.prototype.getTo = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.LockInput.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.LockInput.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.LockInput.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Hash lockId = 3;
 * @return {?proto.Hash}
 */
proto.token.LockInput.prototype.getLockid = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, common_pb.Hash, 3));
};


/** @param {?proto.Hash|undefined} value */
proto.token.LockInput.prototype.setLockid = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.token.LockInput.prototype.clearLockid = function() {
  this.setLockid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.LockInput.prototype.hasLockid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string symbol = 4;
 * @return {string}
 */
proto.token.LockInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.token.LockInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string usage = 5;
 * @return {string}
 */
proto.token.LockInput.prototype.getUsage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.token.LockInput.prototype.setUsage = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 amount = 6;
 * @return {number}
 */
proto.token.LockInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.token.LockInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.UnlockInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.UnlockInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.UnlockInput.displayName = 'proto.token.UnlockInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.UnlockInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.UnlockInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.UnlockInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.UnlockInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && common_pb.Address.toObject(includeInstance, f),
    to: (f = msg.getTo()) && common_pb.Address.toObject(includeInstance, f),
    lockid: (f = msg.getLockid()) && common_pb.Hash.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    usage: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.UnlockInput}
 */
proto.token.UnlockInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.UnlockInput;
  return proto.token.UnlockInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.UnlockInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.UnlockInput}
 */
proto.token.UnlockInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = new common_pb.Hash;
      reader.readMessage(value,common_pb.Hash.deserializeBinaryFromReader);
      msg.setLockid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.UnlockInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.UnlockInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.UnlockInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.UnlockInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getLockid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional Address from = 1;
 * @return {?proto.Address}
 */
proto.token.UnlockInput.prototype.getFrom = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.UnlockInput.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.UnlockInput.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.UnlockInput.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address to = 2;
 * @return {?proto.Address}
 */
proto.token.UnlockInput.prototype.getTo = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.UnlockInput.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.UnlockInput.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.UnlockInput.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Hash lockId = 3;
 * @return {?proto.Hash}
 */
proto.token.UnlockInput.prototype.getLockid = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, common_pb.Hash, 3));
};


/** @param {?proto.Hash|undefined} value */
proto.token.UnlockInput.prototype.setLockid = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.token.UnlockInput.prototype.clearLockid = function() {
  this.setLockid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.UnlockInput.prototype.hasLockid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string symbol = 4;
 * @return {string}
 */
proto.token.UnlockInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.token.UnlockInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string usage = 5;
 * @return {string}
 */
proto.token.UnlockInput.prototype.getUsage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.token.UnlockInput.prototype.setUsage = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 amount = 6;
 * @return {number}
 */
proto.token.UnlockInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.token.UnlockInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.TransferFromInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.TransferFromInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.TransferFromInput.displayName = 'proto.token.TransferFromInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.TransferFromInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.TransferFromInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.TransferFromInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TransferFromInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && common_pb.Address.toObject(includeInstance, f),
    to: (f = msg.getTo()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.TransferFromInput}
 */
proto.token.TransferFromInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.TransferFromInput;
  return proto.token.TransferFromInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.TransferFromInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.TransferFromInput}
 */
proto.token.TransferFromInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.TransferFromInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.TransferFromInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.TransferFromInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TransferFromInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Address from = 1;
 * @return {?proto.Address}
 */
proto.token.TransferFromInput.prototype.getFrom = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.TransferFromInput.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.TransferFromInput.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.TransferFromInput.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address to = 2;
 * @return {?proto.Address}
 */
proto.token.TransferFromInput.prototype.getTo = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.TransferFromInput.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.TransferFromInput.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.TransferFromInput.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.token.TransferFromInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.token.TransferFromInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint64 amount = 4;
 * @return {number}
 */
proto.token.TransferFromInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.TransferFromInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.token.TransferFromInput.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.token.TransferFromInput.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.ApproveInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.ApproveInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.ApproveInput.displayName = 'proto.token.ApproveInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.ApproveInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.ApproveInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.ApproveInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.ApproveInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    spender: (f = msg.getSpender()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.ApproveInput}
 */
proto.token.ApproveInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.ApproveInput;
  return proto.token.ApproveInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.ApproveInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.ApproveInput}
 */
proto.token.ApproveInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setSpender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.ApproveInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.ApproveInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.ApproveInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.ApproveInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional Address spender = 1;
 * @return {?proto.Address}
 */
proto.token.ApproveInput.prototype.getSpender = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.ApproveInput.prototype.setSpender = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.ApproveInput.prototype.clearSpender = function() {
  this.setSpender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.ApproveInput.prototype.hasSpender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.token.ApproveInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.token.ApproveInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 amount = 3;
 * @return {number}
 */
proto.token.ApproveInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.ApproveInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.UnApproveInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.UnApproveInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.UnApproveInput.displayName = 'proto.token.UnApproveInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.UnApproveInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.UnApproveInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.UnApproveInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.UnApproveInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    spender: (f = msg.getSpender()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.UnApproveInput}
 */
proto.token.UnApproveInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.UnApproveInput;
  return proto.token.UnApproveInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.UnApproveInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.UnApproveInput}
 */
proto.token.UnApproveInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setSpender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.UnApproveInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.UnApproveInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.UnApproveInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.UnApproveInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional Address spender = 1;
 * @return {?proto.Address}
 */
proto.token.UnApproveInput.prototype.getSpender = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.UnApproveInput.prototype.setSpender = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.UnApproveInput.prototype.clearSpender = function() {
  this.setSpender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.UnApproveInput.prototype.hasSpender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.token.UnApproveInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.token.UnApproveInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 amount = 3;
 * @return {number}
 */
proto.token.UnApproveInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.UnApproveInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.BurnInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.BurnInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.BurnInput.displayName = 'proto.token.BurnInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.BurnInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.BurnInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.BurnInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.BurnInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.BurnInput}
 */
proto.token.BurnInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.BurnInput;
  return proto.token.BurnInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.BurnInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.BurnInput}
 */
proto.token.BurnInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.BurnInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.BurnInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.BurnInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.BurnInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.BurnInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.BurnInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 amount = 2;
 * @return {number}
 */
proto.token.BurnInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.BurnInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.ChargeTransactionFeesInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.ChargeTransactionFeesInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.ChargeTransactionFeesInput.displayName = 'proto.token.ChargeTransactionFeesInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.ChargeTransactionFeesInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.ChargeTransactionFeesInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.ChargeTransactionFeesInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.ChargeTransactionFeesInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.ChargeTransactionFeesInput}
 */
proto.token.ChargeTransactionFeesInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.ChargeTransactionFeesInput;
  return proto.token.ChargeTransactionFeesInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.ChargeTransactionFeesInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.ChargeTransactionFeesInput}
 */
proto.token.ChargeTransactionFeesInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.ChargeTransactionFeesInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.ChargeTransactionFeesInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.ChargeTransactionFeesInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.ChargeTransactionFeesInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.ChargeTransactionFeesInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.ChargeTransactionFeesInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 amount = 2;
 * @return {number}
 */
proto.token.ChargeTransactionFeesInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.ChargeTransactionFeesInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.ClaimTransactionFeesInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.ClaimTransactionFeesInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.ClaimTransactionFeesInput.displayName = 'proto.token.ClaimTransactionFeesInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.ClaimTransactionFeesInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.ClaimTransactionFeesInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.ClaimTransactionFeesInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.ClaimTransactionFeesInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.ClaimTransactionFeesInput}
 */
proto.token.ClaimTransactionFeesInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.ClaimTransactionFeesInput;
  return proto.token.ClaimTransactionFeesInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.ClaimTransactionFeesInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.ClaimTransactionFeesInput}
 */
proto.token.ClaimTransactionFeesInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.ClaimTransactionFeesInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.ClaimTransactionFeesInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.ClaimTransactionFeesInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.ClaimTransactionFeesInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.ClaimTransactionFeesInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.ClaimTransactionFeesInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 height = 2;
 * @return {number}
 */
proto.token.ClaimTransactionFeesInput.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.ClaimTransactionFeesInput.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.GetMethodFeeInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.GetMethodFeeInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.GetMethodFeeInput.displayName = 'proto.token.GetMethodFeeInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.GetMethodFeeInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.GetMethodFeeInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.GetMethodFeeInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetMethodFeeInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.GetMethodFeeInput}
 */
proto.token.GetMethodFeeInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.GetMethodFeeInput;
  return proto.token.GetMethodFeeInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.GetMethodFeeInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.GetMethodFeeInput}
 */
proto.token.GetMethodFeeInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.GetMethodFeeInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.GetMethodFeeInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.GetMethodFeeInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetMethodFeeInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.token.GetMethodFeeInput.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.GetMethodFeeInput.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.GetMethodFeeOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.GetMethodFeeOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.GetMethodFeeOutput.displayName = 'proto.token.GetMethodFeeOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.GetMethodFeeOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.GetMethodFeeOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.GetMethodFeeOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetMethodFeeOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.GetMethodFeeOutput}
 */
proto.token.GetMethodFeeOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.GetMethodFeeOutput;
  return proto.token.GetMethodFeeOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.GetMethodFeeOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.GetMethodFeeOutput}
 */
proto.token.GetMethodFeeOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.GetMethodFeeOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.GetMethodFeeOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.GetMethodFeeOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetMethodFeeOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.token.GetMethodFeeOutput.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.GetMethodFeeOutput.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 fee = 2;
 * @return {number}
 */
proto.token.GetMethodFeeOutput.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.GetMethodFeeOutput.prototype.setFee = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.SetMethodFeeInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.SetMethodFeeInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.SetMethodFeeInput.displayName = 'proto.token.SetMethodFeeInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.SetMethodFeeInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.SetMethodFeeInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.SetMethodFeeInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.SetMethodFeeInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.SetMethodFeeInput}
 */
proto.token.SetMethodFeeInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.SetMethodFeeInput;
  return proto.token.SetMethodFeeInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.SetMethodFeeInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.SetMethodFeeInput}
 */
proto.token.SetMethodFeeInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.SetMethodFeeInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.SetMethodFeeInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.SetMethodFeeInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.SetMethodFeeInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.token.SetMethodFeeInput.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.SetMethodFeeInput.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 fee = 2;
 * @return {number}
 */
proto.token.SetMethodFeeInput.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.SetMethodFeeInput.prototype.setFee = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.GetTokenInfoInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.GetTokenInfoInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.GetTokenInfoInput.displayName = 'proto.token.GetTokenInfoInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.GetTokenInfoInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.GetTokenInfoInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.GetTokenInfoInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetTokenInfoInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.GetTokenInfoInput}
 */
proto.token.GetTokenInfoInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.GetTokenInfoInput;
  return proto.token.GetTokenInfoInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.GetTokenInfoInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.GetTokenInfoInput}
 */
proto.token.GetTokenInfoInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.GetTokenInfoInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.GetTokenInfoInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.GetTokenInfoInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetTokenInfoInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.GetTokenInfoInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.GetTokenInfoInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.GetBalanceInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.GetBalanceInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.GetBalanceInput.displayName = 'proto.token.GetBalanceInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.GetBalanceInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.GetBalanceInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.GetBalanceInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetBalanceInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    owner: (f = msg.getOwner()) && common_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.GetBalanceInput}
 */
proto.token.GetBalanceInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.GetBalanceInput;
  return proto.token.GetBalanceInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.GetBalanceInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.GetBalanceInput}
 */
proto.token.GetBalanceInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.GetBalanceInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.GetBalanceInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.GetBalanceInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetBalanceInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.GetBalanceInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.GetBalanceInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Address owner = 2;
 * @return {?proto.Address}
 */
proto.token.GetBalanceInput.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.GetBalanceInput.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.GetBalanceInput.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.GetBalanceInput.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.GetBalanceOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.GetBalanceOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.GetBalanceOutput.displayName = 'proto.token.GetBalanceOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.GetBalanceOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.GetBalanceOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.GetBalanceOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetBalanceOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    owner: (f = msg.getOwner()) && common_pb.Address.toObject(includeInstance, f),
    balance: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.GetBalanceOutput}
 */
proto.token.GetBalanceOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.GetBalanceOutput;
  return proto.token.GetBalanceOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.GetBalanceOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.GetBalanceOutput}
 */
proto.token.GetBalanceOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.GetBalanceOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.GetBalanceOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.GetBalanceOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetBalanceOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.GetBalanceOutput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.GetBalanceOutput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Address owner = 2;
 * @return {?proto.Address}
 */
proto.token.GetBalanceOutput.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.GetBalanceOutput.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.GetBalanceOutput.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.GetBalanceOutput.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint64 balance = 3;
 * @return {number}
 */
proto.token.GetBalanceOutput.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.GetBalanceOutput.prototype.setBalance = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.GetAllowanceInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.GetAllowanceInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.GetAllowanceInput.displayName = 'proto.token.GetAllowanceInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.GetAllowanceInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.GetAllowanceInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.GetAllowanceInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetAllowanceInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    owner: (f = msg.getOwner()) && common_pb.Address.toObject(includeInstance, f),
    spender: (f = msg.getSpender()) && common_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.GetAllowanceInput}
 */
proto.token.GetAllowanceInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.GetAllowanceInput;
  return proto.token.GetAllowanceInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.GetAllowanceInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.GetAllowanceInput}
 */
proto.token.GetAllowanceInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setSpender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.GetAllowanceInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.GetAllowanceInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.GetAllowanceInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetAllowanceInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSpender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.GetAllowanceInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.GetAllowanceInput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Address owner = 2;
 * @return {?proto.Address}
 */
proto.token.GetAllowanceInput.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.GetAllowanceInput.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.GetAllowanceInput.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.GetAllowanceInput.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address spender = 3;
 * @return {?proto.Address}
 */
proto.token.GetAllowanceInput.prototype.getSpender = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 3));
};


/** @param {?proto.Address|undefined} value */
proto.token.GetAllowanceInput.prototype.setSpender = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.token.GetAllowanceInput.prototype.clearSpender = function() {
  this.setSpender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.GetAllowanceInput.prototype.hasSpender = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.GetAllowanceOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.GetAllowanceOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.GetAllowanceOutput.displayName = 'proto.token.GetAllowanceOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.GetAllowanceOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.GetAllowanceOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.GetAllowanceOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetAllowanceOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    owner: (f = msg.getOwner()) && common_pb.Address.toObject(includeInstance, f),
    spender: (f = msg.getSpender()) && common_pb.Address.toObject(includeInstance, f),
    allowance: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.GetAllowanceOutput}
 */
proto.token.GetAllowanceOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.GetAllowanceOutput;
  return proto.token.GetAllowanceOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.GetAllowanceOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.GetAllowanceOutput}
 */
proto.token.GetAllowanceOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setSpender(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAllowance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.GetAllowanceOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.GetAllowanceOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.GetAllowanceOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.GetAllowanceOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSpender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getAllowance();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.token.GetAllowanceOutput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.token.GetAllowanceOutput.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Address owner = 2;
 * @return {?proto.Address}
 */
proto.token.GetAllowanceOutput.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.GetAllowanceOutput.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.GetAllowanceOutput.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.GetAllowanceOutput.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address spender = 3;
 * @return {?proto.Address}
 */
proto.token.GetAllowanceOutput.prototype.getSpender = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 3));
};


/** @param {?proto.Address|undefined} value */
proto.token.GetAllowanceOutput.prototype.setSpender = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.token.GetAllowanceOutput.prototype.clearSpender = function() {
  this.setSpender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.GetAllowanceOutput.prototype.hasSpender = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint64 allowance = 4;
 * @return {number}
 */
proto.token.GetAllowanceOutput.prototype.getAllowance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.GetAllowanceOutput.prototype.setAllowance = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.TokenContractInitializeInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.TokenContractInitializeInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.TokenContractInitializeInput.displayName = 'proto.token.TokenContractInitializeInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.TokenContractInitializeInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.TokenContractInitializeInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.TokenContractInitializeInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TokenContractInitializeInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    crosschaincontractsystemname: (f = msg.getCrosschaincontractsystemname()) && common_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.TokenContractInitializeInput}
 */
proto.token.TokenContractInitializeInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.TokenContractInitializeInput;
  return proto.token.TokenContractInitializeInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.TokenContractInitializeInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.TokenContractInitializeInput}
 */
proto.token.TokenContractInitializeInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Hash;
      reader.readMessage(value,common_pb.Hash.deserializeBinaryFromReader);
      msg.setCrosschaincontractsystemname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.TokenContractInitializeInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.TokenContractInitializeInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.TokenContractInitializeInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.TokenContractInitializeInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrosschaincontractsystemname();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional Hash crossChainContractSystemName = 1;
 * @return {?proto.Hash}
 */
proto.token.TokenContractInitializeInput.prototype.getCrosschaincontractsystemname = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, common_pb.Hash, 1));
};


/** @param {?proto.Hash|undefined} value */
proto.token.TokenContractInitializeInput.prototype.setCrosschaincontractsystemname = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.TokenContractInitializeInput.prototype.clearCrosschaincontractsystemname = function() {
  this.setCrosschaincontractsystemname(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.TokenContractInitializeInput.prototype.hasCrosschaincontractsystemname = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.CrossChainTransferInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.CrossChainTransferInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.CrossChainTransferInput.displayName = 'proto.token.CrossChainTransferInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.CrossChainTransferInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.CrossChainTransferInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.CrossChainTransferInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CrossChainTransferInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && common_pb.Address.toObject(includeInstance, f),
    tokeninfo: (f = msg.getTokeninfo()) && proto.token.TokenInfo.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tochainid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.CrossChainTransferInput}
 */
proto.token.CrossChainTransferInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.CrossChainTransferInput;
  return proto.token.CrossChainTransferInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.CrossChainTransferInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.CrossChainTransferInput}
 */
proto.token.CrossChainTransferInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = new proto.token.TokenInfo;
      reader.readMessage(value,proto.token.TokenInfo.deserializeBinaryFromReader);
      msg.setTokeninfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTochainid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.CrossChainTransferInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.CrossChainTransferInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.CrossChainTransferInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CrossChainTransferInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTokeninfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.token.TokenInfo.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTochainid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional Address to = 1;
 * @return {?proto.Address}
 */
proto.token.CrossChainTransferInput.prototype.getTo = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.CrossChainTransferInput.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.CrossChainTransferInput.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.CrossChainTransferInput.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenInfo tokenInfo = 2;
 * @return {?proto.token.TokenInfo}
 */
proto.token.CrossChainTransferInput.prototype.getTokeninfo = function() {
  return /** @type{?proto.token.TokenInfo} */ (
    jspb.Message.getWrapperField(this, proto.token.TokenInfo, 2));
};


/** @param {?proto.token.TokenInfo|undefined} value */
proto.token.CrossChainTransferInput.prototype.setTokeninfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.CrossChainTransferInput.prototype.clearTokeninfo = function() {
  this.setTokeninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.CrossChainTransferInput.prototype.hasTokeninfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint64 amount = 3;
 * @return {number}
 */
proto.token.CrossChainTransferInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.CrossChainTransferInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.token.CrossChainTransferInput.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.token.CrossChainTransferInput.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 toChainId = 5;
 * @return {number}
 */
proto.token.CrossChainTransferInput.prototype.getTochainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.token.CrossChainTransferInput.prototype.setTochainid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.CrossChainReceiveTokenInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.token.CrossChainReceiveTokenInput.repeatedFields_, null);
};
goog.inherits(proto.token.CrossChainReceiveTokenInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.CrossChainReceiveTokenInput.displayName = 'proto.token.CrossChainReceiveTokenInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.token.CrossChainReceiveTokenInput.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.CrossChainReceiveTokenInput.prototype.toObject = function(opt_includeInstance) {
  return proto.token.CrossChainReceiveTokenInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.CrossChainReceiveTokenInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CrossChainReceiveTokenInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromchainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentchainheight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transfertransactionbytes: msg.getTransfertransactionbytes_asB64(),
    merklepathList: jspb.Message.toObjectList(msg.getMerklepathList(),
    common_pb.Hash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.CrossChainReceiveTokenInput}
 */
proto.token.CrossChainReceiveTokenInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.CrossChainReceiveTokenInput;
  return proto.token.CrossChainReceiveTokenInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.CrossChainReceiveTokenInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.CrossChainReceiveTokenInput}
 */
proto.token.CrossChainReceiveTokenInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromchainid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setParentchainheight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransfertransactionbytes(value);
      break;
    case 4:
      var value = new common_pb.Hash;
      reader.readMessage(value,common_pb.Hash.deserializeBinaryFromReader);
      msg.addMerklepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.CrossChainReceiveTokenInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.CrossChainReceiveTokenInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.CrossChainReceiveTokenInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.CrossChainReceiveTokenInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromchainid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getParentchainheight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTransfertransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMerklepathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 fromChainId = 1;
 * @return {number}
 */
proto.token.CrossChainReceiveTokenInput.prototype.getFromchainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.token.CrossChainReceiveTokenInput.prototype.setFromchainid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 parentChainHeight = 2;
 * @return {number}
 */
proto.token.CrossChainReceiveTokenInput.prototype.getParentchainheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.token.CrossChainReceiveTokenInput.prototype.setParentchainheight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes transferTransactionBytes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.token.CrossChainReceiveTokenInput.prototype.getTransfertransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes transferTransactionBytes = 3;
 * This is a type-conversion wrapper around `getTransfertransactionbytes()`
 * @return {string}
 */
proto.token.CrossChainReceiveTokenInput.prototype.getTransfertransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransfertransactionbytes()));
};


/**
 * optional bytes transferTransactionBytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransfertransactionbytes()`
 * @return {!Uint8Array}
 */
proto.token.CrossChainReceiveTokenInput.prototype.getTransfertransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransfertransactionbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.token.CrossChainReceiveTokenInput.prototype.setTransfertransactionbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Hash merklePath = 4;
 * @return {!Array.<!proto.Hash>}
 */
proto.token.CrossChainReceiveTokenInput.prototype.getMerklepathList = function() {
  return /** @type{!Array.<!proto.Hash>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Hash, 4));
};


/** @param {!Array.<!proto.Hash>} value */
proto.token.CrossChainReceiveTokenInput.prototype.setMerklepathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Hash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Hash}
 */
proto.token.CrossChainReceiveTokenInput.prototype.addMerklepath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Hash, opt_index);
};


proto.token.CrossChainReceiveTokenInput.prototype.clearMerklepathList = function() {
  this.setMerklepathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.Transferred = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.Transferred, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.Transferred.displayName = 'proto.token.Transferred';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.Transferred.prototype.toObject = function(opt_includeInstance) {
  return proto.token.Transferred.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.Transferred} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.Transferred.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && common_pb.Address.toObject(includeInstance, f),
    to: (f = msg.getTo()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.Transferred}
 */
proto.token.Transferred.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.Transferred;
  return proto.token.Transferred.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.Transferred} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.Transferred}
 */
proto.token.Transferred.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.Transferred.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.Transferred.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.Transferred} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.Transferred.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Address from = 1;
 * @return {?proto.Address}
 */
proto.token.Transferred.prototype.getFrom = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.Transferred.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.Transferred.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.Transferred.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address to = 2;
 * @return {?proto.Address}
 */
proto.token.Transferred.prototype.getTo = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.Transferred.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.Transferred.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.Transferred.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.token.Transferred.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.token.Transferred.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint64 amount = 4;
 * @return {number}
 */
proto.token.Transferred.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.Transferred.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.token.Transferred.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.token.Transferred.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.Approved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.Approved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.Approved.displayName = 'proto.token.Approved';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.Approved.prototype.toObject = function(opt_includeInstance) {
  return proto.token.Approved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.Approved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.Approved.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && common_pb.Address.toObject(includeInstance, f),
    spender: (f = msg.getSpender()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.Approved}
 */
proto.token.Approved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.Approved;
  return proto.token.Approved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.Approved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.Approved}
 */
proto.token.Approved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setSpender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.Approved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.Approved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.Approved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.Approved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSpender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional Address owner = 1;
 * @return {?proto.Address}
 */
proto.token.Approved.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.Approved.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.Approved.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.Approved.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address spender = 2;
 * @return {?proto.Address}
 */
proto.token.Approved.prototype.getSpender = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.Approved.prototype.setSpender = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.Approved.prototype.clearSpender = function() {
  this.setSpender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.Approved.prototype.hasSpender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.token.Approved.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.token.Approved.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint64 amount = 4;
 * @return {number}
 */
proto.token.Approved.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.Approved.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.UnApproved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.UnApproved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.UnApproved.displayName = 'proto.token.UnApproved';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.UnApproved.prototype.toObject = function(opt_includeInstance) {
  return proto.token.UnApproved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.UnApproved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.UnApproved.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && common_pb.Address.toObject(includeInstance, f),
    spender: (f = msg.getSpender()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.UnApproved}
 */
proto.token.UnApproved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.UnApproved;
  return proto.token.UnApproved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.UnApproved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.UnApproved}
 */
proto.token.UnApproved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setSpender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.UnApproved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.UnApproved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.UnApproved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.UnApproved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSpender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional Address owner = 1;
 * @return {?proto.Address}
 */
proto.token.UnApproved.prototype.getOwner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.UnApproved.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.UnApproved.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.UnApproved.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address spender = 2;
 * @return {?proto.Address}
 */
proto.token.UnApproved.prototype.getSpender = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.Address|undefined} value */
proto.token.UnApproved.prototype.setSpender = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.token.UnApproved.prototype.clearSpender = function() {
  this.setSpender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.UnApproved.prototype.hasSpender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.token.UnApproved.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.token.UnApproved.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint64 amount = 4;
 * @return {number}
 */
proto.token.UnApproved.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.token.UnApproved.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.token.Burned = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.token.Burned, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.token.Burned.displayName = 'proto.token.Burned';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.token.Burned.prototype.toObject = function(opt_includeInstance) {
  return proto.token.Burned.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.token.Burned} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.Burned.toObject = function(includeInstance, msg) {
  var f, obj = {
    burner: (f = msg.getBurner()) && common_pb.Address.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.token.Burned}
 */
proto.token.Burned.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.token.Burned;
  return proto.token.Burned.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.token.Burned} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.token.Burned}
 */
proto.token.Burned.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setBurner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.token.Burned.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.token.Burned.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.token.Burned} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.token.Burned.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBurner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional Address burner = 1;
 * @return {?proto.Address}
 */
proto.token.Burned.prototype.getBurner = function() {
  return /** @type{?proto.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.Address|undefined} value */
proto.token.Burned.prototype.setBurner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.token.Burned.prototype.clearBurner = function() {
  this.setBurner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.token.Burned.prototype.hasBurner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.token.Burned.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.token.Burned.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 amount = 3;
 * @return {number}
 */
proto.token.Burned.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.token.Burned.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.token);
