syntax = "proto3";

import "common.proto";
import "kernel.proto";
import "consensus.proto";
import "consensus_dpos.proto";
import "aelf_options.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "AElf.Contracts.Consensus.DPoS.SideChain";

service ConsensusContract {
    option (aelf.csharp_state) = "AElf.Contracts.Consensus.DPoS.SideChain.DPoSContractState";
    // Actions
    rpc InitialConsensus (Round) returns (google.protobuf.Empty) {
    }
    rpc ConfigStrategy (DPoSStrategyInput) returns (google.protobuf.Empty) {
    }
    rpc UpdateValue (ToUpdate) returns (google.protobuf.Empty) {
    }
    rpc NextRound (Round) returns (google.protobuf.Empty) {
    }
    rpc UpdateMainChainConsensus (ConsensusInformation) returns (google.protobuf.Empty) {
    }
    // Views
    rpc GetCurrentRoundInformation(google.protobuf.Empty) returns (Round) {
    }
    rpc GetConsensusCommand (CommandInput) returns (ConsensusCommand) {
        option (aelf.is_view) = true;
    }
    rpc GetInformationToUpdateConsensus (DPoSTriggerInformation) returns (DPoSHeaderInformation) {
        option (aelf.is_view) = true;
    }
    rpc GenerateConsensusTransactions (DPoSTriggerInformation) returns (TransactionList) {
        option (aelf.is_view) = true;
    }
    rpc ValidateConsensusBeforeExecution (DPoSHeaderInformation) returns (ValidationResult) {
        option (aelf.is_view) = true;
    }
    rpc ValidateConsensusAfterExecution (DPoSHeaderInformation) returns (ValidationResult) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentMiners (google.protobuf.Empty) returns (MinerList) {
        option (aelf.is_view) = true;
    }
}

// Events
message IrreversibleBlockFound {
    option (aelf.is_event) = true;
    sint64 offset = 1;
}
