syntax = "proto3";

import "common.proto";
import "aelf_options.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "AElf.Contracts.TokenConverter";

service TokenConverterContract {
    option (aelf.csharp_state) = "AElf.Contracts.TokenConverter.TokenConverterContractState";
    // Actions
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc SetConnector (Connector) returns (google.protobuf.Empty) {
    }
    rpc Buy(BuyInput) returns(google.protobuf.Empty) {
    }
    rpc Sell(SellInput) returns(google.protobuf.Empty) {
    }
    // Views
    rpc GetTokenContractAddress (google.protobuf.Empty) returns (Address) {
        option (aelf.is_view) = true;
    }
    rpc GetFeeReceiverAddress (google.protobuf.Empty) returns (Address) {
        option (aelf.is_view) = true;
    }
    rpc GetConnector (TokenId) returns (Connector) {
        option (aelf.is_view) = true;
    }
}

message Connector {
    string symbol = 1;
    sint64 virtualBalance = 2;
    sint64 weight = 3; // Weight based on MAX of 1,000,000
    bool isVirtualBalanceEnabled = 4; // true if virtual balance is enabled, false if not
    bool isPurchaseEnabled = 5;
}

message ConnectorPurchasability {
    string symbol = 1;
    bool isPurchaseEnabled = 2;
}

message TokenId {
    string symbol = 1;
}

message UserTokenId {
    Address address = 1;
    string symbol = 2;
}

message InitializeInput {
    Address tokenContractAddress = 1;
    Address feeReceiverAddress = 2;
    string baseTokenSymbol = 3;
    repeated Connector connectors = 4;
    sint64 feeRateNumerator = 5; // Numerator of fee rate
    sint64 feeRateDenominator = 6; // Denominator of fee rate
    sint32 maxWeight = 7;
    Address manager = 8;
}

message ConvertInput {
    string fromSymbol = 1;
    sint64 fromAmount = 2;
    string toSymbol = 3;
}

message BuyInput {
    string symbol = 1;
    sint64 amount = 2;
    sint64 payLimit = 3; // No buy if paying more than this, 0 if no limit
}

message SellInput {
    string symbol = 1;
    sint64 amount = 2;
    sint64 receiveLimit = 3; // No sell if receiving less than this, 0 if no limit
}
